#parse("/include/packages_variables.vm")
#parse("/include/init_var_entity.vm")
#parse("/include/java_header.vm")

#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#set( $serviceName = "${entity.name}Service"	)
#set( $dtoSearchName = "${entity.name}SearchDto"	)
#set( $serviceImplName = "${entity.name}ServiceImpl"	)
#set( $repositoryName = "${entity.name}Repository"	)
#set( $enumSearchName = "${entity.name}SearchEnum"	)
#set( $enumExportName = "${entity.name}ExportEnum"	)
#set( $uncapitalizedRepoName = $fn.uncapitalize($repositoryName) )
#set( $entityClass = "${entity.name}.class")
#set( $importDto = "${entity.name}Dto")
#set( $importDtoClass = "${entity.name}Dto.class")

#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
package ${target.javaPackageFromFolder($SRC)};


import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import jp.sf.amateras.mirage.provider.ConnectionProvider;
import vn.com.unit.dms.dto.ImportCommonDto;
import vn.com.unit.dms.dto.ImportExcelSearchDto;
import vn.com.unit.dms.dto.$importDto;
import vn.com.unit.dms.entity.${entity.name};
import vn.com.unit.dms.repository.${repositoryName};
import vn.com.unit.dms.service.ImportExcelInterfaceService;
import vn.com.unit.jcanary.config.SystemConfig;

/**
 * Spring MVC ServiceImpl for '${entity.name}' management.
 */

@SuppressWarnings("rawtypes")
@Service
@Transactional(readOnly = true, rollbackFor = Exception.class)
public class ${serviceImplName}<T extends ImportCommonDto> implements ImportExcelInterfaceService{

	@Autowired
    private ${repositoryName} ${uncapitalizedRepoName};
    
    /** MessageSource */
    @Autowired
    private MessageSource msg;

    /** SystemConfigure */
    @Autowired
    SystemConfig systemConfig;

    @Autowired
    ServletContext servletContext;

    @Autowired
    @Qualifier("connectionProviderSqlServer")
    ConnectionProvider connectionProvider;

    @Override
    public MessageSource getMessageSource() {
        return msg;
    }

    @Override
    public int countData(String sessionKey) {
        return ${uncapitalizedRepoName}.countData(sessionKey);
    }

    @Override
    public int countError(String sessionKey) {
        return ${uncapitalizedRepoName}.countError(sessionKey);
    }

    @Override
    public List<$importDto> getListData(int offset, String sessionKey, int sizeOfPage) {
        return ${uncapitalizedRepoName}.findListData(offset, sizeOfPage, sessionKey);
    }

    @Override
    public List<$importDto> getListDataExport(String sessionKey) {
        return ${uncapitalizedRepoName}.findListDataExport(sessionKey);
    }

    @Override
    public List<$importDto> getAllDatas(String sessionKey) {
        return ${uncapitalizedRepoName}.findAllDatas(sessionKey);
    }

    @Override
    public boolean validateBusiness(String sessionKey, ImportExcelSearchDto searchDto, Map mapParams, List listDataValidate) {
        return true;
    }

    @Override
    public Class getImportDto() {
        return $importDtoClass;
    }

    @Override
    public Class getEntity() {
        return $entityClass;
    }

    @Override
    public ConnectionProvider getConnectionProvider() {
        return connectionProvider;
    }

    @Override
    public ServletContext getServletContext() {
        return servletContext;
    }

    @Override
    public SystemConfig getSystemConfig() {
        return systemConfig;
    }
}
